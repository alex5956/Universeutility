(self["webpackChunk"] = self["webpackChunk"] || []).push([["stripe"],{

/***/ "./assets/js/stripe.js":
/*!*****************************!*\
  !*** ./assets/js/stripe.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");

var stripe = Stripe("pk_live_4ZH0HjhS2O1G84Jll3tW9xMA00wZfoV8fR"); // The items the customer wants to buy

var purchase = {
  items: [{
    id: "xl-tshirt"
  }]
}; // Disable the button until we have Stripe set up on the page

document.querySelector("button").disabled = true;
fetch("/create.php", {
  method: "POST",
  headers: {
    "Content-Type": "application/json"
  },
  body: JSON.stringify(purchase)
}).then(function (result) {
  return result.json();
}).then(function (data) {
  var elements = stripe.elements();
  var style = {
    base: {
      color: "#32325d",
      fontFamily: 'Arial, sans-serif',
      fontSmoothing: "antialiased",
      fontSize: "16px",
      "::placeholder": {
        color: "#32325d"
      }
    },
    invalid: {
      fontFamily: 'Arial, sans-serif',
      color: "#fa755a",
      iconColor: "#fa755a"
    }
  };
  var card = elements.create("card", {
    style: style
  }); // Stripe injects an iframe into the DOM

  card.mount("#card-element");
  card.on("change", function (event) {
    // Disable the Pay button if there are no card details in the Element
    document.querySelector("button").disabled = event.empty;
    document.querySelector("#card-error").textContent = event.error ? event.error.message : "";
  });
  var form = document.getElementById("payment-form");
  form.addEventListener("submit", function (event) {
    event.preventDefault(); // Complete payment when the submit button is clicked

    payWithCard(stripe, card, data.clientSecret);
  });
}); // Calls stripe.confirmCardPayment
// If the card requires authentication Stripe shows a pop-up modal to
// prompt the user to enter authentication details without leaving your page.

var payWithCard = function payWithCard(stripe, card, clientSecret) {
  loading(true);
  stripe.confirmCardPayment(clientSecret, {
    payment_method: {
      card: card
    }
  }).then(function (result) {
    if (result.error) {
      // Show error to your customer
      showError(result.error.message);
    } else {
      // The payment succeeded!
      orderComplete(result.paymentIntent.id);
    }
  });
};
/* ------- UI helpers ------- */
// Shows a success message when the payment is complete


var orderComplete = function orderComplete(paymentIntentId) {
  loading(false);
  document.querySelector(".result-message a").setAttribute("href", "https://dashboard.stripe.com/test/payments/" + paymentIntentId);
  document.querySelector(".result-message").classList.remove("hidden");
  document.querySelector("button").disabled = true;
}; // Show the customer the error from Stripe if their card fails to charge


var showError = function showError(errorMsgText) {
  loading(false);
  var errorMsg = document.querySelector("#card-error");
  errorMsg.textContent = errorMsgText;
  setTimeout(function () {
    errorMsg.textContent = "";
  }, 4000);
}; // Show a spinner on payment submission


var loading = function loading(isLoading) {
  if (isLoading) {
    // Disable the button and show a spinner
    document.querySelector("button").disabled = true;
    document.querySelector("#spinner").classList.remove("hidden");
    document.querySelector("#button-text").classList.add("hidden");
  } else {
    document.querySelector("button").disabled = false;
    document.querySelector("#spinner").classList.add("hidden");
    document.querySelector("#button-text").classList.remove("hidden");
  }
};

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendors-node_modules_core-js_internals_function-name_js-node_modules_core-js_internals_object-792382","vendors-node_modules_core-js_internals_export_js-node_modules_core-js_internals_function-bind-633d96","vendors-node_modules_core-js_modules_es_promise_js-node_modules_core-js_modules_web_timers_js"], () => (__webpack_exec__("./assets/js/stripe.js")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,